# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from itertools import combinations
import logging

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ ---
from services.config import get_valid_config, save_config
from aiogram import Bot

logger = logging.getLogger(__name__)

async def get_stars_balance(bot: Bot, user_id: int) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API –±–æ—Ç–∞.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        int: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    offset = 0
    limit = 100
    balance = 0

    while True:
        try:
            get_transactions = await bot.get_star_transactions(offset=offset, limit=limit)
            transactions = get_transactions.transactions

            if not transactions:
                break

            for transaction in transactions:
                source = transaction.source
                amount = transaction.amount
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–≤—è–∑–∞–Ω–∞ —Å user_id
                if source and getattr(source, "user", None) and source.user.id == user_id:
                    balance += amount
                elif source is None:  # –í–æ–∑–≤—Ä–∞—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å user_id
                    balance -= amount

            offset += limit
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è user_id={user_id}: {e}")
            break

    logger.info(f"–ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è user_id={user_id}: {balance}")
    return balance

async def refresh_balance(bot: Bot, user_id: int) -> int:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        int: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å.
    """
    try:
        balance = await get_stars_balance(bot, user_id)
        config = await get_valid_config(user_id)
        config["BALANCE"] = balance
        await save_config(config, user_id)
        logger.info(f"–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è user_id={user_id}: {balance}")
        return balance
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è user_id={user_id}: {e}")
        config = await get_valid_config(user_id)
        return config.get("BALANCE", 0)

async def change_balance(bot: Bot, user_id: int, delta: int) -> int:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ delta, –Ω–µ –¥–æ–ø—É—Å–∫–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        delta: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ).

    Returns:
        int: –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.
    """
    try:
        config = await get_valid_config(user_id)
        config["BALANCE"] = max(0, config.get("BALANCE", 0) + delta)
        balance = config["BALANCE"]
        await save_config(config, user_id)
        logger.info(f"–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—ë–Ω –¥–ª—è user_id={user_id}: {balance}")
        return balance
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è user_id={user_id}: {e}")
        config = await get_valid_config(user_id)
        return config.get("BALANCE", 0)

async def refund_all_star_payments(bot: Bot, user_id: int, username: str, message_func=None) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–≤—ë–∑–¥—ã —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞, —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã–º —É–∫–∞–∑–∞–Ω–Ω—ã–º username.
    –ü–æ–¥–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–π —Å—É–º–º—ã.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ –¥–µ–ø–æ–∑–∏—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è.
        message_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –ø–æ–ª—è–º–∏ "refunded", "count", "txn_ids", "left", "next_deposit".
    """
    try:
        balance = await refresh_balance(bot, user_id)
        if balance <= 0:
            logger.info(f"–ë–∞–ª–∞–Ω—Å user_id={user_id} —Ä–∞–≤–µ–Ω 0, –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return {"refunded": 0, "count": 0, "txn_ids": [], "left": 0, "next_deposit": None}

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        offset = 0
        limit = 100
        all_txns = []
        while True:
            try:
                res = await bot.get_star_transactions(offset=offset, limit=limit)
                txns = res.transactions
                if not txns:
                    break
                all_txns.extend(txns)
                offset += limit
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è user_id={user_id}: {e}")
                break

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω—ã–º username
        deposits = [
            t for t in all_txns
            if t.source is not None
            and getattr(t.source, "user", None)
            and getattr(t.source.user, "username", None) == username
            and getattr(t.source.user, "id", None) == user_id
        ]
        refunded_ids = {t.id for t in all_txns if t.source is None}
        unrefunded_deposits = [t for t in deposits if t.id not in refunded_ids]

        n = len(unrefunded_deposits)
        best_combo = []
        best_sum = 0

        # –ò—â–µ–º –∏–¥–µ–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–ª–∏ greedy
        if n <= 18:
            for r in range(1, n + 1):
                for combo in combinations(unrefunded_deposits, r):
                    s = sum(t.amount for t in combo)
                    if s <= balance and s > best_sum:
                        best_combo = combo
                        best_sum = s
                    if best_sum == balance:
                        break
                if best_sum == balance:
                    break
        else:
            unrefunded_deposits.sort(key=lambda t: t.amount, reverse=True)
            curr_sum = 0
            best_combo = []
            for t in unrefunded_deposits:
                if curr_sum + t.amount <= balance:
                    best_combo.append(t)
                    curr_sum += t.amount
            best_sum = curr_sum

        if not best_combo:
            logger.info(f"–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è user_id={user_id}")
            return {"refunded": 0, "count": 0, "txn_ids": [], "left": balance, "next_deposit": None}

        # –î–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
        total_refunded = 0
        refund_ids = []
        for txn in best_combo:
            txn_id = getattr(txn, "id", None)
            if not txn_id:
                continue
            try:
                await bot.refund_star_payment(
                    user_id=user_id,
                    telegram_payment_charge_id=txn_id
                )
                total_refunded += txn.amount
                refund_ids.append(txn_id)
                logger.info(f"–í–æ–∑–≤—Ä–∞—Ç {txn.amount} –∑–≤—ë–∑–¥ –¥–ª—è user_id={user_id}, txn_id={txn_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ {txn.amount} –∑–≤—ë–∑–¥ –¥–ª—è user_id={user_id}: {e}")
                if message_func:
                    await message_func(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ ‚òÖ{txn.amount}")

        left = balance - total_refunded

        # –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π —Ö–≤–∞—Ç–∏—Ç —á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
        def find_next_possible_deposit(unused_deposits, min_needed):
            bigger = [t for t in unused_deposits if t.amount > min_needed]
            if not bigger:
                return None
            best = min(bigger, key=lambda t: t.amount)
            return {"amount": best.amount, "id": getattr(best, "id", None)}

        unused_deposits = [t for t in unrefunded_deposits if t not in best_combo]
        next_possible = None
        if left > 0 and unused_deposits:
            next_possible = find_next_possible_deposit(unused_deposits, left)

        return {
            "refunded": total_refunded,
            "count": len(refund_ids),
            "txn_ids": refund_ids,
            "left": left,
            "next_deposit": next_possible
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è user_id={user_id}: {e}")
        return {"refunded": 0, "count": 0, "txn_ids": [], "left": balance, "next_deposit": None}