# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import asyncio
import logging
import os
import sys

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ ---
from services.config import (
    ensure_config,
    save_config,
    get_valid_config,
    get_target_display,
    DEFAULT_CONFIG,
    VERSION,
    PURCHASE_COOLDOWN
)
from services.menu import update_menu
from services.balance import refresh_balance
from services.gifts import get_filtered_gifts
from services.buy import buy_gift
from handlers.handlers_wizard import register_wizard_handlers
from handlers.handlers_catalog import register_catalog_handlers
from handlers.handlers_main import register_main_handlers
from utils.logging import setup_logging
from middlewares.access_control import AccessControlMiddleware
from middlewares.rate_limit import RateLimitMiddleware
from database import init_db, get_allowed_users, add_allowed_user

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
USER_ID = int(os.getenv("TELEGRAM_USER_ID"))

setup_logging()
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
dp.message.middleware(RateLimitMiddleware(commands_limits={"/start": 3, "/withdraw_all": 3, "/grant_access": 3, "/revoke_access": 3}))
dp.message.middleware(AccessControlMiddleware())
dp.callback_query.middleware(AccessControlMiddleware())

register_wizard_handlers(dp)
register_catalog_handlers(dp)
register_main_handlers(
    dp=dp,
    bot=bot,
    version=VERSION
)

async def gift_purchase_worker():
    """
    –§–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä LIMIT ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å.
    –ï—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äî –ø—Ä–æ—Ñ–∏–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∏ –≤–æ—Ä–∫–µ—Ä –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.
    """
    while True:
        try:
            allowed_user_ids = await get_allowed_users()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id in allowed_user_ids:
                config = await get_valid_config(user_id)
                if not config["ACTIVE"]:
                    continue

                message = None
                report_message_lines = []
                progress_made = False  # –ë—ã–ª –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º –Ω–∞ —ç—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–µ
                any_success = True

                for profile_index, profile in enumerate(config["PROFILES"]):
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
                    if profile.get("DONE"):
                        continue

                    MIN_PRICE = profile["MIN_PRICE"]
                    MAX_PRICE = profile["MAX_PRICE"]
                    MIN_SUPPLY = profile["MIN_SUPPLY"]
                    MAX_SUPPLY = profile["MAX_SUPPLY"]
                    COUNT = profile["COUNT"]
                    LIMIT = profile.get("LIMIT", 0)
                    TARGET_USER_ID = profile["TARGET_USER_ID"]
                    TARGET_CHAT_ID = profile["TARGET_CHAT_ID"]

                    filtered_gifts = await get_filtered_gifts(
                        bot, MIN_PRICE, MAX_PRICE, MIN_SUPPLY, MAX_SUPPLY
                    )

                    if not filtered_gifts:
                        continue

                    purchases = []
                    before_bought = profile["BOUGHT"]
                    before_spent = profile["SPENT"]

                    for gift in filtered_gifts:
                        gift_id = gift["id"]
                        gift_price = gift["price"]
                        gift_total_count = gift["supply"]
                        sticker_file_id = gift["sticker_file_id"]

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–æ–π
                        while (profile["BOUGHT"] < COUNT and
                               profile["SPENT"] + gift_price <= LIMIT):
                            success = await buy_gift(
                                bot=bot,
                                env_user_id=user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –≤–º–µ—Å—Ç–æ USER_ID
                                gift_id=gift_id,
                                user_id=TARGET_USER_ID,
                                chat_id=TARGET_CHAT_ID,
                                gift_price=gift_price,
                                file_id=sticker_file_id
                            )

                            if not success:
                                any_success = False
                                break  # –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫

                            config = await get_valid_config(user_id)
                            profile = config["PROFILES"][profile_index]
                            profile["BOUGHT"] += 1
                            profile["SPENT"] += gift_price
                            purchases.append({"id": gift_id, "price": gift_price})
                            await save_config(config, user_id)
                            await asyncio.sleep(PURCHASE_COOLDOWN)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
                            if profile["SPENT"] >= LIMIT:
                                break

                        if profile["BOUGHT"] >= COUNT or profile["SPENT"] >= LIMIT:
                            break  # –î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç –ª–∏–±–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É, –ª–∏–±–æ –ø–æ —Å—É–º–º–µ

                    after_bought = profile["BOUGHT"]
                    after_spent = profile["SPENT"]
                    made_local_progress = (after_bought > before_bought) or (after_spent > before_spent)

                    # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω: –ª–∏–±–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É, –ª–∏–±–æ –ø–æ –ª–∏–º–∏—Ç—É
                    if (profile["BOUGHT"] >= COUNT or profile["SPENT"] >= LIMIT) and not profile["DONE"]:
                        config = await get_valid_config(user_id)
                        profile = config["PROFILES"][profile_index]
                        profile["DONE"] = True
                        await save_config(config, user_id)

                        target_display = get_target_display(profile, user_id)
                        summary_lines = [
                            f"\n‚îå‚úÖ <b>–ü—Ä–æ—Ñ–∏–ª—å {profile_index+1}</b>\n"
                            f"‚îúüë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {target_display}\n"
                            f"‚îúüí∏ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {profile['SPENT']:,} / {LIMIT:,} ‚òÖ\n"
                            f"‚îîüéÅ <b>–ö—É–ø–ª–µ–Ω–æ </b>{profile['BOUGHT']} –∏–∑ {COUNT}:"
                        ]
                        gift_summary = {}
                        for p in purchases:
                            key = p["id"]
                            if key not in gift_summary:
                                gift_summary[key] = {"price": p["price"], "count": 0}
                            gift_summary[key]["count"] += 1

                        gift_items = list(gift_summary.items())
                        for idx, (gid, data) in enumerate(gift_items):
                            prefix = "   ‚îî" if idx == len(gift_items) - 1 else "   ‚îú"
                            summary_lines.append(
                                f"{prefix} {data['price']:,} ‚òÖ √ó {data['count']}"
                            )
                        report_message_lines += summary_lines

                        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å #{profile_index+1} –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è user_id={user_id}")
                        progress_made = True
                        await refresh_balance(bot, user_id)  # –ü–µ—Ä–µ–¥–∞—ë–º user_id
                        continue  # –ö —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é

                    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–ª–µ–Ω–æ ‚Äî –±–∞–ª–∞–Ω—Å/–ª–∏–º–∏—Ç/–ø–æ–¥–∞—Ä–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å
                    if (profile["BOUGHT"] < COUNT or profile["SPENT"] < LIMIT) and not profile["DONE"] and made_local_progress:
                        target_display = get_target_display(profile, user_id)
                        summary_lines = [
                            f"\n‚îå‚ö†Ô∏è <b>–ü—Ä–æ—Ñ–∏–ª—å {profile_index+1}</b> (—á–∞—Å—Ç–∏—á–Ω–æ)\n"
                            f"‚îúüë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {target_display}\n"
                            f"‚îúüí∏ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {profile['SPENT']:,} / {LIMIT:,} ‚òÖ\n"
                            f"‚îîüéÅ <b>–ö—É–ø–ª–µ–Ω–æ </b>{profile['BOUGHT']} –∏–∑ {COUNT}:"
                        ]
                        gift_summary = {}
                        for p in purchases:
                            key = p["id"]
                            if key not in gift_summary:
                                gift_summary[key] = {"price": p["price"], "count": 0}
                            gift_summary[key]["count"] += 1

                        gift_items = list(gift_summary.items())
                        for idx, (gid, data) in enumerate(gift_items):
                            prefix = "   ‚îî" if idx == len(gift_items) - 1 else "   ‚îú"
                            summary_lines.append(
                                f"{prefix} {data['price']:,} ‚òÖ √ó {data['count']}"
                            )
                        report_message_lines += summary_lines

                        logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å #{profile_index+1} –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è user_id={user_id}")
                        progress_made = True
                        await refresh_balance(bot, user_id)  # –ü–µ—Ä–µ–¥–∞—ë–º user_id
                        continue  # –ö —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é

                if not any_success and not progress_made:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –ø–æ–¥–∞—Ä–æ–∫ –Ω–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è user_id={user_id}"
                    )
                    config["ACTIVE"] = False
                    await save_config(config, user_id)
                    text = "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–∞—Ä–∫–∏, –Ω–æ <b>–Ω–µ —É–¥–∞–ª–æ—Å—å</b> –∫—É–ø–∏—Ç—å.\nüí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!\nüö¶ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ üî¥ (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)."
                    message = await bot.send_message(chat_id=user_id, text=text)
                    await update_menu(
                        bot=bot, chat_id=user_id, user_id=user_id, message_id=message.message_id
                    )

                # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π:
                if progress_made:
                    config["ACTIVE"] = not all(p.get("DONE") for p in config["PROFILES"])
                    await save_config(config, user_id)
                    logger.info(f"–û—Ç—á—ë—Ç: —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è user_id={user_id}")
                    text = "üçÄ <b>–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º:</b>\n"
                    text += "\n".join(report_message_lines) if report_message_lines else "‚ö†Ô∏è –ü–æ–∫—É–ø–æ–∫ –Ω–µ —Å–æ–≤–µ—Ä—à–µ–Ω–æ."
                    message = await bot.send_message(chat_id=user_id, text=text)
                    await update_menu(
                        bot=bot, chat_id=user_id, user_id=user_id, message_id=message.message_id
                    )

                if all(p.get("DONE") for p in config["PROFILES"]) and config["ACTIVE"]:
                    config["ACTIVE"] = False
                    await save_config(config, user_id)
                    text = "‚úÖ –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ <b>–∑–∞–≤–µ—Ä—à–µ–Ω—ã</b>!\n‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ ‚ôªÔ∏è <b>–°–±—Ä–æ—Å–∏—Ç—å</b> –∏–ª–∏ ‚úèÔ∏è <b>–ò–∑–º–µ–Ω–∏—Ç—å</b>!"
                    message = await bot.send_message(chat_id=user_id, text=text)
                    await update_menu(
                        bot=bot, chat_id=user_id, user_id=user_id, message_id=message.message_id
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ gift_purchase_worker –¥–ª—è user_id={user_id}: {e}")

        await asyncio.sleep(0.5)

async def main() -> None:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞, –∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –∏ polling.
    """
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await add_allowed_user(USER_ID)  # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
    await ensure_config(USER_ID)  # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –∞–¥–º–∏–Ω–∞
    asyncio.create_task(gift_purchase_worker())
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())