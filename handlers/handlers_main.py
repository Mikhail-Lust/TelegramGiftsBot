# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from aiogram import F, Bot, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message, PreCheckoutQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ ---
from services.config import get_valid_config, save_config, format_config_summary, get_target_display
from services.menu import update_menu, config_action_keyboard
from services.balance import refresh_balance, refund_all_star_payments
from services.buy import buy_gift
from database import add_allowed_user, remove_allowed_user, get_allowed_users
from dotenv import load_dotenv
import os

load_dotenv()
USER_ID = int(os.getenv("TELEGRAM_USER_ID"))  # ID –∞–¥–º–∏–Ω–∞ –∏–∑ .env

router = Router()

def register_main_handlers(dp: Router, bot: Bot, version: str) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–º–∞–Ω–¥.
    """
    @dp.message(CommandStart())
    async def command_start_handler(message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        user_id = message.from_user.id
        await state.clear()
        await refresh_balance(bot, user_id)
        await update_menu(bot=bot, chat_id=message.chat.id, user_id=user_id, message_id=message.message_id)

    @dp.message(Command("status"))
    async def command_status_handler(message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
        """
        user_id = message.from_user.id
        await refresh_balance(bot, user_id)
        config = await get_valid_config(user_id)
        summary = format_config_summary(config, user_id)
        await message.answer(f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n{summary}")

    @dp.message(Command("withdraw_all"))
    async def command_withdraw_all_handler(message: Message) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /withdraw_all ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤—Å–µ—Ö –∑–≤—ë–∑–¥.
        """
        user_id = message.from_user.id
        username = message.from_user.username
        if not username:
            await message.answer("‚ö†Ô∏è –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω—É–∂–µ–Ω username –≤ Telegram!")
            return
        result = await refresh_balance(bot, user_id)
        result = await refund_all_star_payments(bot, user_id, username, message_func=message.answer)
        refunded = result["refunded"]
        count = result["count"]
        left = result["left"]
        next_deposit = result["next_deposit"]
        text = f"üí∏ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: ‚òÖ{refunded} ({count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)\n"
        if left > 0:
            text += f"üìâ –û—Å—Ç–∞—Ç–æ–∫: ‚òÖ{left}\n"
            if next_deposit:
                text += f"‚ÑπÔ∏è –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ ‚òÖ{next_deposit['amount']} –∏–ª–∏ –±–æ–ª—å—à–µ."
            else:
                text += "‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞."
        else:
            text += "‚úÖ –í–µ—Å—å –±–∞–ª–∞–Ω—Å –≤–æ–∑–≤—Ä–∞—â—ë–Ω!"
        await message.answer(text)

    @dp.message(Command("grant_access"))
    async def command_grant_access_handler(message: Message) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /grant_access ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.
        –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.
        """
        user_id = message.from_user.id
        if user_id != USER_ID:
            await message.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /grant_access <user_id>")
            return
        try:
            target_user_id = int(args[1])
            await add_allowed_user(target_user_id)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.")
        except ValueError:
            await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    @dp.message(Command("revoke_access"))
    async def command_revoke_access_handler(message: Message) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /revoke_access ‚Äî —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.
        –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.
        """
        user_id = message.from_user.id
        if user_id != USER_ID:
            await message.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /revoke_access <user_id>")
            return
        try:
            target_user_id = int(args[1])
            if target_user_id == USER_ID:
                await message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
            await remove_allowed_user(target_user_id)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.")
        except ValueError:
            await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    @dp.message(Command("list_allowed_users"))
    async def command_list_allowed_users_handler(message: Message) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /list_allowed_users ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.
        """
        user_id = message.from_user.id
        if user_id != USER_ID:
            await message.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        allowed_users = await get_allowed_users()
        if not allowed_users:
            await message.answer("üìã –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return
        text = "üìã –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join([f"- {uid}" for uid in allowed_users])
        await message.answer(text)

    @dp.callback_query(F.data == "main_menu")
    async def start_callback(call: CallbackQuery, state: FSMContext) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é".
        –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        user_id = call.from_user.id
        await state.clear()
        await call.answer()
        await refresh_balance(bot, user_id)
        await update_menu(
            bot=bot,
            chat_id=call.message.chat.id,
            user_id=user_id,
            message_id=call.message.message_id
        )

    @dp.callback_query(F.data == "show_help")
    async def help_callback(call: CallbackQuery) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º.
        """
        user_id = call.from_user.id
        config = await get_valid_config(user_id)
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        profile = config["PROFILES"][0]
        target_display = get_target_display(profile, user_id)
        bot_info = await bot.get_me()
        bot_username = bot_info.username
        help_text = (
            f"<b>üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º <code>v{version}</code> :</b>\n\n"
            "<b>üü¢ –í–∫–ª—é—á–∏—Ç—å / üî¥ –í—ã–∫–ª—é—á–∏—Ç—å</b> ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫–∏.\n"
            "<b>‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</b> ‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤.\n"
            "<b>‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫</b> ‚Äî –æ–±–Ω—É–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —Ç–∞–∫–∏–µ –∂–µ –ø—Ä–æ—Ñ–∏–ª–∏.\n"
            "<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å</b> ‚Äî –¥–µ–ø–æ–∑–∏—Ç –∑–≤—ë–∑–¥ –≤ –±–æ—Ç.\n"
            "<b>‚Ü©Ô∏è –í—ã–≤–µ—Å—Ç–∏</b> ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –∑–≤—ë–∑–¥ –ø–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–≤—ë–∑–¥—ã —Å—Ä–∞–∑—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /withdraw_all.\n"
            "<b>üéè –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤</b> ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –º–∞—Ä–∫–µ—Ç–µ.\n\n"
            "<b>üìå –ü–æ–¥—Å–∫–∞–∑–∫–∏:</b>\n\n"
            f"‚ùóÔ∏è –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞ ‚Äî –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–Ω –¥–æ–ª–∂–µ–Ω –∑–∞–π—Ç–∏ –≤ —ç—Ç–æ—Ç –±–æ—Ç <code>@{bot_username}</code> –∏ –Ω–∞–∂–∞—Ç—å <code>/start</code>.\n"
            "‚ùóÔ∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞ <b>–∞–∫–∫–∞—É–Ω—Ç</b> ‚Äî –ø–∏—à–∏—Ç–µ <b>id</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–∑–Ω–∞—Ç—å id –º–æ–∂–Ω–æ —Ç—É—Ç @userinfobot).\n"
            "‚ùóÔ∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞ <b>–∫–∞–Ω–∞–ª</b> ‚Äî –ø–∏—à–∏—Ç–µ <b>username</b> –∫–∞–Ω–∞–ª–∞.\n"
            f"‚ùóÔ∏è –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ —Å –ª—é–±–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –∑–∞–π–¥–∏—Ç–µ –≤ —ç—Ç–æ—Ç –±–æ—Ç <code>@{bot_username}</code> –∏ –Ω–∞–∂–º–∏—Ç–µ <code>/start</code>, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
            "‚ùóÔ∏è –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b> –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–≤—ë–∑–¥?  –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º –∏ —Ç–∞–º –±—É–¥–µ—Ç ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n"
            f"‚ùóÔ∏è –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç? –ö—É–ø–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ üß∏ –∑–∞ ‚òÖ15, –ø–æ–ª—É—á–∞—Ç–µ–ª—å {target_display}.\n\n"
        )
        button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–¢–µ—Å—Ç? –ö—É–ø–∏—Ç—å üß∏ –∑–∞ ‚òÖ15", callback_data="buy_test_gift")],
            [InlineKeyboardButton(text="‚ò∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await call.answer()
        await call.message.answer(help_text, reply_markup=button)

    @dp.callback_query(F.data == "buy_test_gift")
    async def buy_test_gift(call: CallbackQuery) -> None:
        """
        –ü–æ–∫—É–ø–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
        """
        user_id = call.from_user.id
        gift_id = '5170233102089322756'
        config = await get_valid_config(user_id)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        profile = config["PROFILES"][0]
        TARGET_USER_ID = profile["TARGET_USER_ID"]
        TARGET_CHAT_ID = profile["TARGET_CHAT_ID"]
        target_display = get_target_display(profile, user_id)

        success = await buy_gift(
            bot=bot,
            env_user_id=user_id,
            gift_id=gift_id,
            user_id=TARGET_USER_ID,
            chat_id=TARGET_CHAT_ID,
            gift_price=15,
            file_id=None
        )
        if not success:
            await call.answer()
            await call.message.answer("‚ö†Ô∏è –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ üß∏ –∑–∞ ‚òÖ15 –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.\nüí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.\nüö¶ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ üî¥ (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω).")
            config["ACTIVE"] = False
            await save_config(config, user_id)
            await update_menu(bot=bot, chat_id=call.message.chat.id, user_id=user_id, message_id=call.message.message_id)
            return

        await call.answer()
        await call.message.answer(f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ üß∏ –∑–∞ ‚òÖ15 –∫—É–ø–ª–µ–Ω. –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {target_display}.")
        await update_menu(bot=bot, chat_id=call.message.chat.id, user_id=user_id, message_id=call.message.message_id)

    @dp.callback_query(F.data == "reset_bought")
    async def reset_bought_callback(call: CallbackQuery) -> None:
        """
        –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ñ–∏–ª—è–º.
        """
        user_id = call.from_user.id
        config = await get_valid_config(user_id)
        # –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –≤–æ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö
        for profile in config["PROFILES"]:
            profile["BOUGHT"] = 0
            profile["SPENT"] = 0
            profile["DONE"] = False
        config["ACTIVE"] = False
        await save_config(config, user_id)
        info = format_config_summary(config, user_id)
        try:
            await call.message.edit_text(
                info,
                reply_markup=config_action_keyboard(config["ACTIVE"])
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
        await call.answer("–°—á—ë—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫ —Å–±—Ä–æ—à–µ–Ω.")

    @dp.callback_query(F.data == "toggle_active")
    async def toggle_active_callback(call: CallbackQuery) -> None:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: –∞–∫—Ç–∏–≤–µ–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.
        """
        user_id = call.from_user.id
        config = await get_valid_config(user_id)
        config["ACTIVE"] = not config.get("ACTIVE", False)
        await save_config(config, user_id)
        info = format_config_summary(config, user_id)
        await call.message.edit_text(
            info,
            reply_markup=config_action_keyboard(config["ACTIVE"])
        )
        await call.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")

    @dp.pre_checkout_query()
    async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –≤ Telegram Invoice.
        """
        await pre_checkout_query.answer(ok=True)

    @dp.message(F.successful_payment)
    async def process_successful_payment(message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Telegram Invoice.
        """
        user_id = message.from_user.id
        await message.answer(
            f'‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω.',
            message_effect_id="5104841245755180586"
        )
        await refresh_balance(bot, user_id)
        await update_menu(bot=bot, chat_id=message.chat.id, user_id=user_id, message_id=message.message_id)